// This is your Prisma schema file
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Group {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  members   Member[]
  puzzles   Puzzle[]
}

model Member {
  id          String        @id @default(uuid())
  name        String
  groupId     String
  group       Group         @relation(fields: [groupId], references: [id])
  puzzles     Puzzle[]      @relation("Author")
  attempts    Attempt[]
  score       Int           @default(0)
}

model Puzzle {
  id          String     @id @default(uuid())
  authorId    String
  groupId     String
  createdAt   DateTime   @default(now())
  author      Member     @relation("Author", fields: [authorId], references: [id])
  group       Group      @relation(fields: [groupId], references: [id])
  categories  Category[]
  attempts    Attempt[]
  difficulty  String     @default("medium") // easy, medium, hard, very hard
}

model Category {
  id          String     @id @default(uuid())
  name        String
  color       String     // yellow, green, blue, purple
  puzzleId    String
  puzzle      Puzzle     @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  words       Word[]
}

model Word {
  id          String     @id @default(uuid())
  text        String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Attempt {
  id           String     @id @default(uuid())
  memberId     String
  puzzleId     String
  completed    Boolean    @default(false)
  incorrectGuesses Int    @default(0)
  score        Int        @default(0)
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  member       Member     @relation(fields: [memberId], references: [id])
  puzzle       Puzzle     @relation(fields: [puzzleId], references: [id])
} 